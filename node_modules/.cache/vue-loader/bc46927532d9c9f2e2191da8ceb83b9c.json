{"remainingRequest":"/Users/fuheyong/.config/yarn/global/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/fuheyong/Desktop/zhufeng/component/components/father.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/fuheyong/Desktop/zhufeng/component/components/father.vue","mtime":1615817162917},{"path":"/Users/fuheyong/.config/yarn/global/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1611488807737},{"path":"/Users/fuheyong/.config/yarn/global/node_modules/cache-loader/dist/cjs.js","mtime":1594523039079},{"path":"/Users/fuheyong/.config/yarn/global/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1611488831891}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vIHNvbjHniLblrZDkvKDpgJIKLy8gaW1wb3J0IHNvbjEgZnJvbSAnLi9zb24xJwoKLy8gc29uMueItuWtkOWtmeS8oOmAkgppbXBvcnQgc29uMiBmcm9tICcuL3NvbjInCgovLyBhdHRyc+WSjGxpc3RlbmVycwppbXBvcnQgbGlzdGVuZXJzIGZyb20gJy4vbGlzdGVuZXJzJwoKLy8gcmVmCmltcG9ydCByZWYgZnJvbSAnLi9yZWYnCgovLyBldmVudEJ1cwppbXBvcnQgZXZlbnRCdXMgZnJvbSAnLi9ldmVudEJ1cycKCi8vIHNsb3QKaW1wb3J0IHNsb3QgZnJvbSAnLi9zbG90JwoKZXhwb3J0IGRlZmF1bHQgewogIC8vIDEu54i25YOP5a2Z5a2Q5Lyg5YC877yM5Y+v5Lul6YCa6L+HcHJvdmlkZWjlkoxpbmplY3TmlrnlvI8KICBwcm92aWRlICgpIHsgLy/mj5DkvpvogIXvvIzlsIboh6rlt7HnmoRkYXRh5pq06Zyy5Ye65Y67CiAgICByZXR1cm4geyBwYXJlbnQ6IHRoaXMgfQogIH0sCiAgLy8gMi7pgJrov4ckcGFyZW5077yI54i257uE5Lu277yJ5ZKMJGNoaWxkcmVuKOWtkOe7hOS7tikKICBjb21wb25lbnRzOiB7CiAgICAvLyBzb24xLAogICAgc29uMiwKICAgIGxpc3RlbmVycywKICAgIHJlZiwKICAgIGV2ZW50QnVzLAogICAgJ21lLXNsb3QnOiBzbG90CiAgfSwKICBuYW1lOiAiZmF0aGVyIiwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIG51bTogMTAsCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBjaGFuZ2VOdW0gKGRhdGEpIHsKICAgICAgdGhpcy5udW0gPSBkYXRhCiAgICB9LAogICAgZWF0IChkYXRhKSB7CiAgICAgIGNvbnNvbGUubG9nKCflkIPppa3vvIznnaHop4nvvIzmiZPosYbosYYnLCBkYXRhKQogICAgfSwKICAgIGZuTGlzdGVuZXJzIChkYXRhKSB7CiAgICAgIGNvbnNvbGUubG9nKCdmbkxpc3RlbmVycycsIGRhdGEpCiAgICB9LAogICAgZGlhZ2xvZyAoKSB7CiAgICAgIHRoaXMuJHJlZnMuZGlhZ2xvZy5jaGFuZ2UoKQogICAgfSwKICAgIGV2ZW50QnVzICgpIHsKICAgICAgdGhpcy4kZXZlbnRCdXMuJGVtaXQoJ+iHquWumuS5ieeahOWQjeensCcsIHsgbmFtZTogIuWwj+aYjiIsIGFnZTogMTAgfSkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["father.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"father.vue","sourceRoot":"components","sourcesContent":["\n<template>\n  <div>\n    <p>father:{{num}}</p>\n    <!-- 第一种,传入函数 -->\n    <!-- <son1 :num='num'\n          :changeNum='changeNum'></son1> -->\n    <!-- 第二种，自定义函数 -->\n    <!-- <son1 :num='num'\n          @changeNum='changeNum'></son1> -->\n    <!-- 第三种，v-model-->\n    <!-- <son1 v-model=\"num\"></son1> -->\n    <!-- 第四种，.sync和update的语法糖 -->\n    <!-- <son1 :num.sync=\"num\"></son1> -->\n\n    <son2 @eat='eat'></son2>\n    <button @click=\"$broadcast('fn','sun','123')\">祖先组件调用孙子组件的</button>\n    <!-- listeners和attrs方式 -->\n    <listeners a=1\n               b=2\n               c=3\n               @click=\"fnListeners\"></listeners>\n\n    <!--ref的方式 -->\n    <ref ref=\"diaglog\"></ref>\n    <button @click=\"diaglog\">ref的方式</button>\n\n    <!-- eventBus -->\n    <eventBus></eventBus>\n    <button @click=\"eventBus\">eventBus</button>\n\n    <!-- slot -->\n    <me-slot>\n      <!-- v-slot必须是template模式 -->\n      <template v-slot:header=\"{a,b,c}\">\n        header内容 a:{{a}} b:{{b}} c:{{c}}\n      </template>\n      <template v-slot:content>content内容</template>\n      <template v-slot:footer>footer内容</template>\n    </me-slot>\n  </div>\n</template>\n<script>\n// son1父子传递\n// import son1 from './son1'\n\n// son2父子孙传递\nimport son2 from './son2'\n\n// attrs和listeners\nimport listeners from './listeners'\n\n// ref\nimport ref from './ref'\n\n// eventBus\nimport eventBus from './eventBus'\n\n// slot\nimport slot from './slot'\n\nexport default {\n  // 1.父像孙子传值，可以通过provideh和inject方式\n  provide () { //提供者，将自己的data暴露出去\n    return { parent: this }\n  },\n  // 2.通过$parent（父组件）和$children(子组件)\n  components: {\n    // son1,\n    son2,\n    listeners,\n    ref,\n    eventBus,\n    'me-slot': slot\n  },\n  name: \"father\",\n  data () {\n    return {\n      num: 10,\n    }\n  },\n  methods: {\n    changeNum (data) {\n      this.num = data\n    },\n    eat (data) {\n      console.log('吃饭，睡觉，打豆豆', data)\n    },\n    fnListeners (data) {\n      console.log('fnListeners', data)\n    },\n    diaglog () {\n      this.$refs.diaglog.change()\n    },\n    eventBus () {\n      this.$eventBus.$emit('自定义的名称', { name: \"小明\", age: 10 })\n    }\n  }\n}\n</script>\n\n"]}]}